
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  password: 'password',
  address: 'address',
  anonymous: 'anonymous',
  totalOrderTimes: 'totalOrderTimes',
  totalOrderValue: 'totalOrderValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  isCustomer: 'isCustomer',
  userId: 'userId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KitchenScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  name: 'name',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KitchenLogScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  userId: 'userId',
  orderId: 'orderId',
  dishOrderId: 'dishOrderId',
  dishName: 'dishName',
  dishQuantity: 'dishQuantity',
  status: 'status',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DishOrderScalarFieldEnum = {
  id: 'id',
  dishOrderNo: 'dishOrderNo',
  dishId: 'dishId',
  name: 'name',
  unit: 'unit',
  price: 'price',
  isTaxIncludedPrice: 'isTaxIncludedPrice',
  taxIncludedPrice: 'taxIncludedPrice',
  quantity: 'quantity',
  beforeTaxTotalPrice: 'beforeTaxTotalPrice',
  afterTaxTotalPrice: 'afterTaxTotalPrice',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  beforeTaxTotalDiscountAmount: 'beforeTaxTotalDiscountAmount',
  afterTaxTotalDiscountAmount: 'afterTaxTotalDiscountAmount',
  taxTotalDiscountAmount: 'taxTotalDiscountAmount',
  paymentAmount: 'paymentAmount',
  status: 'status',
  returnedAt: 'returnedAt',
  note: 'note',
  orderId: 'orderId',
  returnedOrderId: 'returnedOrderId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  tableId: 'tableId',
  orderSessionId: 'orderSessionId',
  orderNo: 'orderNo',
  customerId: 'customerId',
  totalQuantity: 'totalQuantity',
  totalBeforeTaxAmount: 'totalBeforeTaxAmount',
  totalAfterTaxAmount: 'totalAfterTaxAmount',
  approvedById: 'approvedById',
  cancelledById: 'cancelledById',
  status: 'status',
  orderSessionStatus: 'orderSessionStatus',
  numberOfCustomer: 'numberOfCustomer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountProductScalarFieldEnum = {
  id: 'id',
  dishOrderId: 'dishOrderId',
  dishId: 'dishId',
  dishName: 'dishName',
  discountRate: 'discountRate',
  discountValue: 'discountValue',
  discountValueType: 'discountValueType',
  beforeTaxDiscountPrice: 'beforeTaxDiscountPrice',
  afterTaxDiscountPrice: 'afterTaxDiscountPrice',
  taxDiscountPrice: 'taxDiscountPrice',
  discountId: 'discountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  discountType: 'discountType',
  discountValue: 'discountValue',
  discountValueType: 'discountValueType',
  beforeTaxTotalDiscountAmount: 'beforeTaxTotalDiscountAmount',
  afterTaxTotalDiscountAmount: 'afterTaxTotalDiscountAmount',
  taxTotalDiscountAmount: 'taxTotalDiscountAmount',
  orderSessionId: 'orderSessionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxDetailScalarFieldEnum = {
  id: 'id',
  taxAmount: 'taxAmount',
  taxRate: 'taxRate',
  orderSessionId: 'orderSessionId'
};

exports.Prisma.PaymentDetailScalarFieldEnum = {
  id: 'id',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  orderSessionId: 'orderSessionId'
};

exports.Prisma.OrderSessionScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  tableIds: 'tableIds',
  tableNames: 'tableNames',
  orderSessionNo: 'orderSessionNo',
  taxRate: 'taxRate',
  totalTaxAmount: 'totalTaxAmount',
  endedAt: 'endedAt',
  auditedAt: 'auditedAt',
  status: 'status',
  pretaxPaymentAmount: 'pretaxPaymentAmount',
  paymentAmount: 'paymentAmount',
  paidByEmployeeId: 'paidByEmployeeId',
  paidByEmployeeName: 'paidByEmployeeName',
  cancelledByEmployeeId: 'cancelledByEmployeeId',
  cancelledByEmployeeName: 'cancelledByEmployeeName',
  cancellationReason: 'cancellationReason',
  customerId: 'customerId',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerAddress: 'customerAddress',
  numberOfCustomer: 'numberOfCustomer',
  totalDiscountAmountBeforeTax: 'totalDiscountAmountBeforeTax',
  totalDiscountAmountAfterTax: 'totalDiscountAmountAfterTax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopScalarFieldEnum = {
  status: 'status',
  name: 'name',
  phone: 'phone',
  email: 'email',
  ownerId: 'ownerId',
  taxRate: 'taxRate',
  location: 'location',
  dishPriceRoundingType: 'dishPriceRoundingType',
  discountRoundingType: 'discountRoundingType',
  taxRoundingType: 'taxRoundingType',
  calculateTaxDirectly: 'calculateTaxDirectly',
  countryName: 'countryName',
  countryCurrency: 'countryCurrency',
  utcOffset: 'utcOffset',
  timezone: 'timezone',
  reportTime: 'reportTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.ImageScalarFieldEnum = {
  url: 'url',
  shopId: 'shopId',
  dishId: 'dishId',
  id: 'id'
};

exports.Prisma.DishCategoryScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  code: 'code',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.DishScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  code: 'code',
  unitId: 'unitId',
  price: 'price',
  taxIncludedPrice: 'taxIncludedPrice',
  isTaxIncludedPrice: 'isTaxIncludedPrice',
  categoryId: 'categoryId',
  type: 'type',
  taxRate: 'taxRate',
  status: 'status',
  isNewlyCreated: 'isNewlyCreated',
  isBestSeller: 'isBestSeller',
  stockQuantity: 'stockQuantity',
  hideForCustomers: 'hideForCustomers',
  hideForEmployees: 'hideForEmployees',
  outOfStockNotification: 'outOfStockNotification',
  description: 'description',
  soldCount: 'soldCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.UnitScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  code: 'code',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.TablePositionScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  dishCategoryIds: 'dishCategoryIds',
  tableIds: 'tableIds',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.TableScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  positionId: 'positionId',
  status: 'status',
  allowMultipleOrderSession: 'allowMultipleOrderSession',
  needApprovalWhenCustomerOrder: 'needApprovalWhenCustomerOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  kitchenId: 'kitchenId'
};

exports.Prisma.EmployeeDepartmentScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  permissions: 'permissions',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.EmployeePositionScalarFieldEnum = {
  shopId: 'shopId',
  name: 'name',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  shopId: 'shopId',
  userId: 'userId',
  name: 'name',
  positionId: 'positionId',
  departmentId: 'departmentId',
  status: 'status',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  user: 'user',
  admin: 'admin'
};

exports.Status = exports.$Enums.Status = {
  enabled: 'enabled',
  disabled: 'disabled'
};

exports.TokenType = exports.$Enums.TokenType = {
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

exports.Switchabletatus = exports.$Enums.Switchabletatus = {
  activated: 'activated',
  deactivated: 'deactivated',
  disabled: 'disabled'
};

exports.KitchenActionEnum = exports.$Enums.KitchenActionEnum = {
  update_served: 'update_served',
  update_cooked: 'update_cooked',
  undo_cooked: 'undo_cooked',
  undo_served: 'undo_served'
};

exports.DishOrderStatus = exports.$Enums.DishOrderStatus = {
  confirmed: 'confirmed',
  cooked: 'cooked',
  served: 'served'
};

exports.OrderSessionStatus = exports.$Enums.OrderSessionStatus = {
  unpaid: 'unpaid',
  paid: 'paid',
  cancelled: 'cancelled'
};

exports.DiscountValueType = exports.$Enums.DiscountValueType = {
  percentage: 'percentage',
  absolute: 'absolute'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  invoice: 'invoice',
  product: 'product'
};

exports.PaymentMethodEnum = exports.$Enums.PaymentMethodEnum = {
  cash: 'cash',
  bank_transfer: 'bank_transfer',
  vnpay: 'vnpay'
};

exports.RoundingPaymentType = exports.$Enums.RoundingPaymentType = {
  ROUND: 'ROUND',
  FLOOR: 'FLOOR',
  CEIL: 'CEIL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  Token: 'Token',
  Kitchen: 'Kitchen',
  KitchenLog: 'KitchenLog',
  DishOrder: 'DishOrder',
  Order: 'Order',
  DiscountProduct: 'DiscountProduct',
  Discount: 'Discount',
  TaxDetail: 'TaxDetail',
  PaymentDetail: 'PaymentDetail',
  OrderSession: 'OrderSession',
  Shop: 'Shop',
  Image: 'Image',
  DishCategory: 'DishCategory',
  Dish: 'Dish',
  Unit: 'Unit',
  TablePosition: 'TablePosition',
  Table: 'Table',
  EmployeeDepartment: 'EmployeeDepartment',
  EmployeePosition: 'EmployeePosition',
  Employee: 'Employee'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
