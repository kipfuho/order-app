generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  name            String
  email           String       @unique
  phone           String?
  password        String
  role            Role         @default(user)
  isEmailVerified Boolean      @default(false)
  status          Status       @default(enabled)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  id              String       @id @default(uuid())
  employee        Employee[]
  kitchenLog      KitchenLog[]
  approveOrder    Order[]      @relation("ApprovedOrders")
  cancelledOrder  Order[]      @relation("CancelledOrders")
  shop            Shop[]
  token           Token[]

  @@index([name])
  @@index([email])
}

model S3Log {
  id        String   @id @default(uuid())
  key       String
  inUse     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model Customer {
  id              String   @id @default(uuid())
  name            String?
  phone           String?
  email           String?
  password        String?
  address         String?
  anonymous       Boolean  @default(true)
  totalOrderTimes Int      @default(0)
  totalOrderValue Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          Status   @default(enabled)
  cart            Cart[]
  order           Order[]
  tokens          Token[]
  shop            Shop[]   @relation("CustomerToShop")
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  isCustomer  Boolean   @default(false)
  userId      String?
  customerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
  @@index([customerId])
}

model Kitchen {
  id             String          @id @default(uuid())
  shopId         String
  name           String
  status         Switchabletatus @default(activated)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  shop           Shop            @relation(fields: [shopId], references: [id])
  dishCategories DishCategory[]  @relation("DishCategoryToKitchen")
  tables         Table[]         @relation("KitchenToTable")

  @@index([shopId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  dishId    String
  quantity  Int
  price     Float
  note      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  dish      Dish     @relation(fields: [dishId], references: [id])

  @@index([cartId])
  @@index([dishId])
}

model Cart {
  id          String     @id @default(uuid())
  shopId      String
  customerId  String
  totalAmount Float      @default(0)
  status      Status     @default(enabled)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customer    Customer   @relation(fields: [customerId], references: [id])
  shop        Shop       @relation(fields: [shopId], references: [id])
  cartItems   CartItem[]

  @@unique([customerId, shopId], name: "customer_shop_unique")
  @@index([shopId])
  @@index([customerId])
}

model KitchenLog {
  id           String            @id @default(uuid())
  shopId       String
  userId       String
  orderId      String
  dishOrderId  String
  dishName     String
  dishQuantity Int
  status       Status            @default(enabled)
  action       KitchenActionEnum
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  dishOrder    DishOrder         @relation(fields: [dishOrderId], references: [id])
  order        Order             @relation(fields: [orderId], references: [id])
  shop         Shop              @relation(fields: [shopId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@index([shopId])
  @@index([userId])
  @@index([orderId])
  @@index([dishOrderId])
  @@index([dishOrderId, action, createdAt])
}

model DishOrder {
  id                           String          @id @default(uuid())
  dishOrderNo                  Int
  dishId                       String?
  name                         String
  unit                         String
  price                        Float
  isTaxIncludedPrice           Boolean
  taxIncludedPrice             Float
  quantity                     Int
  beforeTaxTotalPrice          Float?
  afterTaxTotalPrice           Float?
  taxRate                      Float?
  taxAmount                    Float?
  beforeTaxTotalDiscountAmount Float?
  afterTaxTotalDiscountAmount  Float?
  taxTotalDiscountAmount       Float?
  paymentAmount                Float?
  status                       DishOrderStatus @default(confirmed)
  note                         String          @default("")
  orderId                      String
  dish                         Dish?           @relation(fields: [dishId], references: [id])
  order                        Order           @relation(fields: [orderId], references: [id])
  kitchenLog                   KitchenLog[]

  @@index([orderId])
  @@index([dishId])
}

model ReturnedDishOrder {
  id          String          @id @default(uuid())
  dishOrderNo Int
  dishId      String?
  name        String
  quantity    Int
  status      DishOrderStatus @default(confirmed)
  returnedAt  DateTime        @default(now())
  note        String          @default("")
  orderId     String
  dish        Dish?           @relation(fields: [dishId], references: [id])
  order       Order           @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([dishId])
}

model Order {
  id                   String              @id @default(uuid())
  shopId               String
  tableId              String
  orderSessionId       String?
  orderNo              Int?
  customerId           String?
  totalQuantity        Int?
  totalBeforeTaxAmount Float?
  totalAfterTaxAmount  Float?
  approvedById         String?
  cancelledById        String?
  status               Status              @default(enabled)
  orderSessionStatus   OrderSessionStatus? @default(unpaid)
  numberOfCustomer     Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  dishOrders           DishOrder[]
  KitchenLog           KitchenLog[]
  approvedBy           User?               @relation("ApprovedOrders", fields: [approvedById], references: [id])
  cancelledBy          User?               @relation("CancelledOrders", fields: [cancelledById], references: [id])
  customer             Customer?           @relation(fields: [customerId], references: [id])
  orderSession         OrderSession?       @relation(fields: [orderSessionId], references: [id])
  shop                 Shop                @relation(fields: [shopId], references: [id])
  table                Table               @relation(fields: [tableId], references: [id])
  returnedDishOrders   ReturnedDishOrder[]

  @@index([shopId, customerId])
  @@index([orderSessionId, shopId, orderSessionStatus, status, createdAt])
}

model DiscountProduct {
  id                     String            @id @default(uuid())
  dishOrderId            String
  dishId                 String
  dishName               String
  discountRate           Float
  discountValue          Float
  discountValueType      DiscountValueType
  beforeTaxDiscountPrice Float?
  afterTaxDiscountPrice  Float?
  taxDiscountPrice       Float?
  discountId             String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  discount               Discount          @relation(fields: [discountId], references: [id])

  @@index([discountId])
}

model Discount {
  id                           String            @id @default(uuid())
  name                         String
  discountType                 DiscountType
  discountValue                Float
  discountValueType            DiscountValueType
  beforeTaxTotalDiscountAmount Float?
  afterTaxTotalDiscountAmount  Float?
  taxTotalDiscountAmount       Float?
  orderSessionId               String
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  orderSession                 OrderSession      @relation(fields: [orderSessionId], references: [id])
  discountProducts             DiscountProduct[]

  @@index([orderSessionId])
}

model TaxDetail {
  id             String       @id @default(uuid())
  taxAmount      Float
  taxRate        Float
  orderSessionId String
  orderSession   OrderSession @relation(fields: [orderSessionId], references: [id])

  @@index([orderSessionId])
}

model PaymentDetail {
  id             String            @id @default(uuid())
  paymentMethod  PaymentMethodEnum
  paymentAmount  Float
  orderSessionId String
  orderSession   OrderSession      @relation(fields: [orderSessionId], references: [id])

  @@index([orderSessionId])
}

model OrderSession {
  id                           String             @id @default(uuid())
  shopId                       String
  tableIds                     String[]
  tableNames                   String[]
  orderSessionNo               Int
  taxRate                      Float              @default(0)
  totalTaxAmount               Float?
  endedAt                      DateTime?
  auditedAt                    DateTime?
  status                       OrderSessionStatus @default(unpaid)
  pretaxPaymentAmount          Float?
  paymentAmount                Float?
  paidByEmployeeId             String?
  paidByEmployeeName           String?
  cancelledByEmployeeId        String?
  cancelledByEmployeeName      String?
  cancellationReason           String?
  customerId                   String?
  customerName                 String?
  customerPhone                String?
  customerAddress              String?
  numberOfCustomer             Int                @default(1)
  totalDiscountAmountBeforeTax Float?
  totalDiscountAmountAfterTax  Float?
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  discounts                    Discount[]
  orders                       Order[]
  shop                         Shop               @relation(fields: [shopId], references: [id])
  paymentDetails               PaymentDetail[]
  taxDetails                   TaxDetail[]

  @@index([shopId, createdAt, status, tableIds])
}

model Shop {
  status                Status               @default(enabled)
  name                  String
  phone                 String?
  email                 String?
  ownerId               String
  taxRate               Float                @default(0)
  location              String?
  dishPriceRoundingType RoundingPaymentType  @default(ROUND)
  discountRoundingType  RoundingPaymentType  @default(ROUND)
  taxRoundingType       RoundingPaymentType  @default(ROUND)
  calculateTaxDirectly  Boolean              @default(false)
  countryName           String               @default("Việt Nam")
  countryCurrency       String               @default("vnd")
  utcOffset             Int                  @default(7)
  timezone              String               @default("Asia/Ho_Chi_Minh")
  reportTime            Int                  @default(0)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  id                    String               @id @default(uuid())
  imageUrls             String[]
  cart                  Cart[]
  dish                  Dish[]
  dishCategory          DishCategory[]
  employees             Employee[]
  employeeDepartments   EmployeeDepartment[]
  employeePositions     EmployeePosition[]
  kitchen               Kitchen[]
  kitchenLog            KitchenLog[]
  order                 Order[]
  orderSession          OrderSession[]
  owner                 User                 @relation(fields: [ownerId], references: [id])
  table                 Table[]
  tablePosition         TablePosition[]
  unit                  Unit[]
  customer              Customer[]           @relation("CustomerToShop")

  @@index([ownerId])
}

model DishCategory {
  shopId        String
  name          String
  code          String
  status        Status          @default(enabled)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  id            String          @id @default(uuid())
  dish          Dish[]
  shop          Shop            @relation(fields: [shopId], references: [id])
  kitchen       Kitchen[]       @relation("DishCategoryToKitchen")
  tablePosition TablePosition[] @relation("DishCategoryToTablePosition")

  @@unique([shopId, code], name: "dishcategory_code_unique")
  @@index([shopId])
}

model Dish {
  shopId                 String
  name                   String
  code                   String
  unitId                 String
  price                  Float
  taxIncludedPrice       Float?
  isTaxIncludedPrice     Boolean             @default(false)
  categoryId             String
  taxRate                Float               @default(0)
  status                 Switchabletatus     @default(activated)
  isNewlyCreated         Boolean             @default(true)
  isBestSeller           Boolean             @default(false)
  stockQuantity          Float               @default(0)
  hideForCustomers       Boolean             @default(false)
  hideForEmployees       Boolean             @default(false)
  outOfStockNotification Boolean             @default(false)
  description            String              @default("")
  soldCount              Float               @default(0)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  id                     String              @id @default(uuid())
  imageUrls              String[]
  type                   DishType
  cartItem               CartItem[]
  category               DishCategory        @relation(fields: [categoryId], references: [id])
  shop                   Shop                @relation(fields: [shopId], references: [id])
  unit                   Unit                @relation(fields: [unitId], references: [id])
  dishOrder              DishOrder[]
  returnedDishOrder      ReturnedDishOrder[]

  @@unique([shopId, code], name: "dish_code_unique")
  @@index([shopId])
}

model Unit {
  shopId      String
  name        String
  code        String
  description String          @default("")
  status      Switchabletatus @default(activated)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  id          String          @id @default(uuid())
  dish        Dish[]
  shop        Shop            @relation(fields: [shopId], references: [id])

  @@unique([shopId, code], name: "unit_code_unique")
  @@index([shopId])
}

model TablePosition {
  shopId          String
  name            String
  dishCategoryIds String[]
  status          Status         @default(enabled)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  id              String         @id @default(uuid())
  code            String
  tables          Table[]
  shop            Shop           @relation(fields: [shopId], references: [id])
  dishCategories  DishCategory[] @relation("DishCategoryToTablePosition")

  @@index([shopId])
}

model Table {
  shopId                        String
  name                          String
  positionId                    String
  status                        Status        @default(enabled)
  allowMultipleOrderSession     Boolean       @default(false)
  needApprovalWhenCustomerOrder Boolean       @default(false)
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  id                            String        @id @default(uuid())
  code                          String
  order                         Order[]
  position                      TablePosition @relation(fields: [positionId], references: [id])
  shop                          Shop          @relation(fields: [shopId], references: [id])
  kitchen                       Kitchen[]     @relation("KitchenToTable")

  @@index([shopId])
}

model EmployeeDepartment {
  shopId      String
  name        String
  permissions String[]
  status      Status     @default(enabled)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  id          String     @id @default(uuid())
  employees   Employee[]
  shop        Shop       @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model EmployeePosition {
  shopId    String
  name      String
  status    Status     @default(enabled)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id        String     @id @default(uuid())
  employees Employee[]
  shop      Shop       @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model Employee {
  shopId       String
  userId       String
  name         String
  positionId   String?
  departmentId String
  status       Status             @default(enabled)
  permissions  String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  id           String             @id @default(uuid())
  department   EmployeeDepartment @relation(fields: [departmentId], references: [id])
  position     EmployeePosition?  @relation(fields: [positionId], references: [id])
  shop         Shop               @relation(fields: [shopId], references: [id])
  user         User               @relation(fields: [userId], references: [id])

  @@index([shopId])
  @@index([userId])
}

enum DishType {
  food
  drink
}

enum TokenType {
  access
  refresh
  reset_password
  verify_email
}

enum KitchenActionEnum {
  update_served
  update_cooked
  undo_cooked
  undo_served
}

enum DishOrderStatus {
  confirmed
  cooked
  served
}

enum OrderSessionStatus {
  unpaid
  paid
  cancelled
}

enum DiscountValueType {
  percentage
  absolute
}

enum DiscountType {
  invoice
  product
}

enum PaymentMethodEnum {
  cash
  bank_transfer
  vnpay
}

enum Status {
  enabled
  disabled
}

enum Switchabletatus {
  activated
  deactivated
  disabled
}

enum RoundingPaymentType {
  ROUND
  FLOOR
  CEIL
}

enum Role {
  user
  admin
}
