generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  name            String
  email           String       @unique
  phone           String?      @unique
  password        String
  role            Role         @default(user)
  isEmailVerified Boolean      @default(false)
  status          Status       @default(enabled)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  id              String       @id @default(uuid())
  employee        Employee[]
  kitchenLog      KitchenLog[]
  approveOrder    Order[]      @relation("ApprovedOrders")
  cancelledOrder  Order[]      @relation("CancelledOrders")
  shop            Shop[]
  token           Token[]
}

model Customer {
  id              String   @id @default(uuid())
  name            String?
  phone           String?
  email           String?
  password        String?
  address         String?
  anonymous       Boolean? @default(false)
  totalOrderTimes Int?     @default(0)
  totalOrderValue Float?   @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]
  tokens          Token[]
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  isCustomer  Boolean   @default(false)
  userId      String?
  customerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}

model Kitchen {
  id             String          @id @default(uuid())
  shopId         String
  name           String
  status         Switchabletatus @default(activated)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  shop           Shop            @relation(fields: [shopId], references: [id])
  tables         Table[]
  dishCategories DishCategory[]  @relation("DishCategoryToKitchen")

  @@index([shopId])
}

model KitchenLog {
  id           String            @id @default(uuid())
  shopId       String
  userId       String
  orderId      String
  dishOrderId  String
  dishName     String
  dishQuantity Int
  status       Status            @default(enabled)
  action       KitchenActionEnum
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  order        Order             @relation(fields: [orderId], references: [id])
  shop         Shop              @relation(fields: [shopId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
}

model DishOrder {
  id                           String          @id @default(uuid())
  dishOrderNo                  Int?
  dishId                       String
  name                         String
  unit                         String
  price                        Float
  isTaxIncludedPrice           Boolean
  taxIncludedPrice             Float?
  quantity                     Int
  beforeTaxTotalPrice          Float
  afterTaxTotalPrice           Float
  taxRate                      Float
  taxAmount                    Float
  beforeTaxTotalDiscountAmount Float
  afterTaxTotalDiscountAmount  Float
  taxTotalDiscountAmount       Float
  paymentAmount                Float
  status                       DishOrderStatus @default(confirmed)
  returnedAt                   DateTime?
  note                         String?
  orderId                      String?
  returnedOrderId              String?
  order                        Order?          @relation("OrderDishOrders", fields: [orderId], references: [id])
  returnedOrder                Order?          @relation("OrderReturnedDishOrders", fields: [returnedOrderId], references: [id])
}

model Order {
  id                   String             @id @default(uuid())
  shopId               String
  tableId              String
  orderSessionId       String
  orderNo              Int
  customerId           String?
  totalQuantity        Int
  totalBeforeTaxAmount Float
  totalAfterTaxAmount  Float
  approvedById         String?
  cancelledById        String?
  status               Status             @default(enabled)
  orderSessionStatus   OrderSessionStatus @default(unpaid)
  numberOfCustomer     Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  dishOrders           DishOrder[]        @relation("OrderDishOrders")
  returnedDishOrders   DishOrder[]        @relation("OrderReturnedDishOrders")
  KitchenLog           KitchenLog[]
  approvedBy           User?              @relation("ApprovedOrders", fields: [approvedById], references: [id])
  cancelledBy          User?              @relation("CancelledOrders", fields: [cancelledById], references: [id])
  customer             Customer?          @relation(fields: [customerId], references: [id])
  orderSession         OrderSession       @relation(fields: [orderSessionId], references: [id])
  shop                 Shop               @relation(fields: [shopId], references: [id])
  table                Table              @relation(fields: [tableId], references: [id])

  @@index([shopId])
}

model DiscountProduct {
  id                     String            @id @default(uuid())
  dishOrderId            String
  dishId                 String
  dishName               String
  discountRate           Float
  discountValue          Float
  discountValueType      DiscountValueType
  beforeTaxDiscountPrice Float
  afterTaxDiscountPrice  Float
  taxDiscountPrice       Float
  discountId             String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  discount               Discount          @relation(fields: [discountId], references: [id])
}

model Discount {
  id                           String            @id @default(uuid())
  name                         String
  discountType                 DiscountType
  discountValue                Float
  discountValueType            DiscountValueType
  beforeTaxTotalDiscountAmount Float
  afterTaxTotalDiscountAmount  Float
  taxTotalDiscountAmount       Float
  orderSessionId               String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  orderSession                 OrderSession?     @relation(fields: [orderSessionId], references: [id])
  discountProducts             DiscountProduct[]
}

model TaxDetail {
  id             String       @id @default(cuid())
  taxAmount      Float
  taxRate        Float
  orderSessionId String
  orderSession   OrderSession @relation(fields: [orderSessionId], references: [id])
}

model PaymentDetail {
  id             String            @id @default(cuid())
  paymentMethod  PaymentMethodEnum
  paymentAmount  Float
  orderSessionId String
  orderSession   OrderSession      @relation(fields: [orderSessionId], references: [id])
}

model OrderSession {
  id                           String             @id @default(uuid())
  shopId                       String
  tableIds                     String[]
  tableNames                   String[]
  orderSessionNo               Int
  taxRate                      Float
  totalTaxAmount               Float
  endedAt                      DateTime?
  auditedAt                    DateTime?
  status                       OrderSessionStatus @default(unpaid)
  pretaxPaymentAmount          Float
  paymentAmount                Float
  paidByEmployeeId             String?
  paidByEmployeeName           String?
  cancelledByEmployeeId        String?
  cancelledByEmployeeName      String?
  cancellationReason           String?
  customerId                   String?
  customerName                 String?
  customerPhone                String?
  customerAddress              String?
  numberOfCustomer             Int?
  totalDiscountAmountBeforeTax Float
  totalDiscountAmountAfterTax  Float
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  discounts                    Discount[]
  orders                       Order[]
  shop                         Shop               @relation(fields: [shopId], references: [id])
  paymentDetails               PaymentDetail[]
  taxDetails                   TaxDetail[]

  @@index([shopId])
}

model Shop {
  status                Status               @default(enabled)
  name                  String?
  phone                 String?
  email                 String?
  ownerId               String?
  taxRate               Float?
  location              String?
  dishPriceRoundingType RoundingPaymentType  @default(ROUND)
  discountRoundingType  RoundingPaymentType  @default(ROUND)
  taxRoundingType       RoundingPaymentType  @default(ROUND)
  calculateTaxDirectly  Boolean?
  countryName           String?
  countryCurrency       String?
  utcOffset             Int                  @default(7)
  timezone              String               @default("Asia/Ho_Chi_Minh")
  reportTime            Int                  @default(0)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  id                    String               @id @default(uuid())
  dish                  Dish[]
  dishCategory          DishCategory[]
  employees             Employee[]
  employeeDepartments   EmployeeDepartment[]
  employeePositions     EmployeePosition[]
  imageUrls             Image[]
  Kitchen               Kitchen[]
  KitchenLog            KitchenLog[]
  Order                 Order[]
  OrderSession          OrderSession[]
  owner                 User?                @relation(fields: [ownerId], references: [id])
  table                 Table[]
  tablePosition         TablePosition[]
  unit                  Unit[]
}

model Image {
  url    String
  shopId String?
  dishId String?
  id     String  @id @default(uuid())
  dish   Dish?   @relation(fields: [dishId], references: [id])
  shop   Shop?   @relation(fields: [shopId], references: [id])
}

model DishCategory {
  shopId        String?
  name          String?
  code          String?
  status        Status          @default(enabled)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  id            String          @id @default(uuid())
  dish          Dish[]
  shop          Shop?           @relation(fields: [shopId], references: [id])
  kitchen       Kitchen[]       @relation("DishCategoryToKitchen")
  tablePosition TablePosition[] @relation("DishCategoryToTablePosition")

  @@index([shopId])
}

model Dish {
  shopId                 String?
  name                   String?
  code                   String?
  unitId                 String?
  price                  Float?
  taxIncludedPrice       Float?
  isTaxIncludedPrice     Boolean?
  categoryId             String?
  type                   String?
  taxRate                Float?
  status                 Switchabletatus @default(activated)
  isNewlyCreated         Boolean         @default(true)
  isBestSeller           Boolean?
  stockQuantity          Float?
  hideForCustomers       Boolean?
  hideForEmployees       Boolean?
  outOfStockNotification Boolean?
  description            String?
  soldCount              Float?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  id                     String          @id @default(uuid())
  category               DishCategory?   @relation(fields: [categoryId], references: [id])
  shop                   Shop?           @relation(fields: [shopId], references: [id])
  unit                   Unit?           @relation(fields: [unitId], references: [id])
  imageUrls              Image[]

  @@index([shopId])
}

model Unit {
  shopId      String
  name        String?
  code        String?
  description String?
  status      Switchabletatus @default(activated)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  id          String          @id @default(uuid())
  dish        Dish[]
  shop        Shop            @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model TablePosition {
  shopId          String
  name            String?
  dishCategoryIds String[]
  tableIds        String[]
  status          Status         @default(enabled)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  id              String         @id @default(uuid())
  shop            Shop           @relation(fields: [shopId], references: [id])
  dishCategories  DishCategory[] @relation("DishCategoryToTablePosition")
  tables          Table[]        @relation("TableToTablePosition")

  @@index([shopId])
}

model Table {
  shopId                        String
  name                          String?
  positionId                    String?
  status                        Status          @default(enabled)
  allowMultipleOrderSession     Boolean?
  needApprovalWhenCustomerOrder Boolean?
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime        @updatedAt
  id                            String          @id @default(uuid())
  kitchenId                     String?
  Order                         Order[]
  Kitchen                       Kitchen?        @relation(fields: [kitchenId], references: [id])
  shop                          Shop            @relation(fields: [shopId], references: [id])
  position                      TablePosition[] @relation("TableToTablePosition")

  @@index([shopId])
}

model EmployeeDepartment {
  shopId      String
  name        String?
  permissions String[]
  status      Status     @default(enabled)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  id          String     @id @default(uuid())
  employees   Employee[]
  shop        Shop       @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model EmployeePosition {
  shopId    String
  name      String?
  status    Status     @default(enabled)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id        String     @id @default(uuid())
  employees Employee[]
  shop      Shop       @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model Employee {
  shopId       String
  userId       String
  name         String?
  positionId   String?
  departmentId String?
  status       Status              @default(enabled)
  permissions  String[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  id           String              @id @default(uuid())
  department   EmployeeDepartment? @relation(fields: [departmentId], references: [id])
  position     EmployeePosition?   @relation(fields: [positionId], references: [id])
  shop         Shop                @relation(fields: [shopId], references: [id])
  user         User                @relation(fields: [userId], references: [id])

  @@index([shopId])
}

enum TokenType {
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum KitchenActionEnum {
  update_served
  update_cooked
  undo_cooked
  undo_served
}

enum DishOrderStatus {
  confirmed
  cooked
  served
}

enum OrderSessionStatus {
  unpaid
  paid
  cancelled
}

enum DiscountValueType {
  percentage
  absolute
}

enum DiscountType {
  invoice
  product
}

enum PaymentMethodEnum {
  cash
  bank_transfer
  vnpay
}

enum Status {
  enabled
  disabled
}

enum Switchabletatus {
  activated
  deactivated
  disabled
}

enum RoundingPaymentType {
  ROUND
  FLOOR
  CEIL
}

enum Role {
  user
  admin
}
